# this IDL is not used by the globus build process.  it is a developer
# tool to drive automatic regeneration of the object and error type hierarchy
# code and/or documentation from one concise definition.  it is part of a very 
# special-purpose hack.
#
# please do not change these files unless you really know what you are doing!
#
#

# IDL format
#
# type : parent { fields } string_func : represents
#
# types are shorthand (just the unique part of the GLOBUS_OBJECT_TYPE_* name)
# list local instance fields only (not inherited)
# instance fields default to globus_object_t * type if none given
# instance fields separated by comma
# represents description is human summary for webdoc
#
# entries must be in order, supertype before subtype
#
# PRINTABLE is handled specially and has no parent type 
# or string_func in the IDL (because it is implemented by hand, not
# by the generator).
#

#
#  at this point I'm wondering if a simple hack like this will work for
#  copy/destroy semantics
#                        copy_action         destroy_action      default init
#  globus_object_t *   globus_object_copy  globus_object_free   NULL
#  char *              globus_libc_strdup  globus_free          NULL
#  int,long,size_t       =                   ;                   -1
#

PRINTABLE : { }

RESOURCE : PRINTABLE { } NULL :a generic resource
   COMPUTER : RESOURCE { char * hostname } NULL :a generic computational resource
      GRAM_RESOURCE : COMPUTER { char * contact } NULL :a computational resource managed by GRAM

   FD_TABLE : RESOURCE { } NULL

   STORAGE : RESOURCE { long size } NULL :a generic storage resource
      FILE : STORAGE { char * filename, int fd, FILE* filep } NULL :a filesystem object
      MEMORY : STORAGE { } NULL :a memory allocation
      BUFFER_POOL : STORAGE { } NULL

   COMMUNICATOR : RESOURCE { } NULL :a generic communication handle
      SOCKET : COMMUNICATOR { } NULL :a socket communication handle

TASK : PRINTABLE { request } NULL :a computation on a resource
   PROCESS : TASK { computer, long pid } NULL :a local process on a computer
   GRAMJOB : TASK { gram_resource, char * contact } NULL :a GRAM job on a GRAM-managed resource

OPERATION : PRINTABLE { identity, computer } NULL :a generic operation hosted on a computer on behalf of some identity
   READ : OPERATION { resource, long offset, long size } NULL :a read from a communication or storage resource
   WRITE : OPERATION { resource, long offset, long size } NULL :a write to a communication or storage resource
      APPEND : WRITE { } NULL :an append to a communication or storage resource
   EXECUTE : OPERATION { globus_object_t * program } NULL
      FORK : EXECUTE { parent } NULL
      SYS_EXEC : EXECUTE { globus_list_t * arguments } NULL
         SYS_EXECLE : SYS_EXEC { globus_list_t * environment } NULL
      GRAM_REQUEST : EXECUTE { resource } NULL
   OPEN_CREATE : OPERATION { resource } NULL
      OPEN : OPEN_CREATE { } NULL
      CREATE : OPEN_CREATE { globus_list_t * mode } NULL
   CLOSE : OPERATION { resource } NULL

USERDATA : PRINTABLE { } NULL
   RSL : USERDATA { char * string, void * globus_rsl } NULL
   
IDENTITY : PRINTABLE { } NULL
   LOCAL_IDENTITY : IDENTITY { computer, char * username } NULL
   GRID_IDENTITY : IDENTITY { char * subject } NULL
   KERBEROS_IDENTITY : IDENTITY { char * principal } NULL

TIME : PRINTABLE { time_t * time } NULL


